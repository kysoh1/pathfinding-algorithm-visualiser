{"ast":null,"code":"export function get4NeighbourNodes(currNode, grid) {\n  const neighbourNodes = [];\n  const {\n    row,\n    column\n  } = currNode;\n  row > 0 && neighbourNodes.push(grid[row - 1][column]);\n  column < grid[0].length - 1 && neighbourNodes.push(grid[row][column + 1]);\n  row < grid.length - 1 && neighbourNodes.push(grid[row + 1][column]);\n  column > 0 && neighbourNodes.push(grid[row][column - 1]);\n  return neighbourNodes;\n}\nexport function get8NeighbourNodes(currNode, grid) {\n  const neighbourNodes = [];\n  const {\n    row,\n    column\n  } = currNode;\n  row > 0 && neighbourNodes.push(grid[row - 1][column]);\n  row > 0 && column < grid[0].length - 1 && neighbourNodes.push(grid[row - 1][column + 1]);\n  column < grid[0].length - 1 && neighbourNodes.push(grid[row][column + 1]);\n  row < grid.length - 1 && column < grid[0].length - 1 && neighbourNodes.push(grid[row + 1][column + 1]);\n  row < grid.length - 1 && neighbourNodes.push(grid[row + 1][column]);\n  row < grid.length - 1 && column > 0 && neighbourNodes.push(grid[row + 1][column - 1]);\n  column > 0 && neighbourNodes.push(grid[row][column - 1]);\n  row > 0 && column > 0 && neighbourNodes.push(grid[row - 1][column - 1]);\n  return neighbourNodes;\n}\nexport function getFinalPathNodes(finishNode) {\n  const finalPathNodes = [];\n  let node = finishNode;\n  while (node !== null) {\n    finalPathNodes.unshift(node);\n    node = node.trackPrevNode;\n  }\n  return finalPathNodes;\n}","map":{"version":3,"names":["get4NeighbourNodes","currNode","grid","neighbourNodes","row","column","push","length","get8NeighbourNodes","getFinalPathNodes","finishNode","finalPathNodes","node","unshift","trackPrevNode"],"sources":["D:/Coding Projects/pathfinding/src/algorithms/commonFunctions.js"],"sourcesContent":["export function get4NeighbourNodes(currNode, grid) {\r\n    const neighbourNodes = [];\r\n    const { row, column } = currNode;\r\n    row > 0 && neighbourNodes.push(grid[row - 1][column]);\r\n    column < grid[0].length - 1 && neighbourNodes.push(grid[row][column + 1]);\r\n    row < grid.length - 1 && neighbourNodes.push(grid[row + 1][column]);\r\n    column > 0 && neighbourNodes.push(grid[row][column - 1]);\r\n\r\n    return neighbourNodes;\r\n}\r\n\r\nexport function get8NeighbourNodes(currNode, grid) {\r\n    const neighbourNodes = [];\r\n    const { row, column } = currNode;\r\n    row > 0 && neighbourNodes.push(grid[row - 1][column]);\r\n    (row > 0 && column < grid[0].length - 1) && neighbourNodes.push(grid[row - 1][column + 1]);\r\n    column < grid[0].length - 1 && neighbourNodes.push(grid[row][column + 1]);\r\n    (row < grid.length - 1 && column < grid[0].length - 1) && neighbourNodes.push(grid[row + 1][column + 1]);\r\n    row < grid.length - 1 && neighbourNodes.push(grid[row + 1][column]);\r\n    (row < grid.length - 1 && column > 0) && neighbourNodes.push(grid[row + 1][column - 1]);\r\n    column > 0 && neighbourNodes.push(grid[row][column - 1]);\r\n    (row > 0 && column > 0) && neighbourNodes.push(grid[row - 1][column - 1]);\r\n\r\n    return neighbourNodes;\r\n}\r\n\r\nexport function getFinalPathNodes(finishNode) {\r\n    const finalPathNodes = [];\r\n    let node = finishNode;\r\n    while (node !== null) {\r\n        finalPathNodes.unshift(node);\r\n        node = node.trackPrevNode;\r\n    }\r\n\r\n    return finalPathNodes;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}